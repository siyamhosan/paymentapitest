/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Admin as PrismaAdmin } from "@prisma/client";

export class AdminServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AdminCountArgs, "select">): Promise<number> {
    return this.prisma.admin.count(args);
  }

  async admins<T extends Prisma.AdminFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdminFindManyArgs>
  ): Promise<PrismaAdmin[]> {
    return this.prisma.admin.findMany<Prisma.AdminFindManyArgs>(args);
  }
  async admin<T extends Prisma.AdminFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdminFindUniqueArgs>
  ): Promise<PrismaAdmin | null> {
    return this.prisma.admin.findUnique(args);
  }
  async createAdmin<T extends Prisma.AdminCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdminCreateArgs>
  ): Promise<PrismaAdmin> {
    return this.prisma.admin.create<T>(args);
  }
  async updateAdmin<T extends Prisma.AdminUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdminUpdateArgs>
  ): Promise<PrismaAdmin> {
    return this.prisma.admin.update<T>(args);
  }
  async deleteAdmin<T extends Prisma.AdminDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdminDeleteArgs>
  ): Promise<PrismaAdmin> {
    return this.prisma.admin.delete(args);
  }
}
