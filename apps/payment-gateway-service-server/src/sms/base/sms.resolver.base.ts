/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Sms } from "./Sms";
import { SmsCountArgs } from "./SmsCountArgs";
import { SmsFindManyArgs } from "./SmsFindManyArgs";
import { SmsFindUniqueArgs } from "./SmsFindUniqueArgs";
import { CreateSmsArgs } from "./CreateSmsArgs";
import { UpdateSmsArgs } from "./UpdateSmsArgs";
import { DeleteSmsArgs } from "./DeleteSmsArgs";
import { Payment } from "../../payment/base/Payment";
import { SmsService } from "../sms.service";
@graphql.Resolver(() => Sms)
export class SmsResolverBase {
  constructor(protected readonly service: SmsService) {}

  async _smsItemsMeta(
    @graphql.Args() args: SmsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Sms])
  async smsItems(@graphql.Args() args: SmsFindManyArgs): Promise<Sms[]> {
    return this.service.smsItems(args);
  }

  @graphql.Query(() => Sms, { nullable: true })
  async sms(@graphql.Args() args: SmsFindUniqueArgs): Promise<Sms | null> {
    const result = await this.service.sms(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Sms)
  async createSms(@graphql.Args() args: CreateSmsArgs): Promise<Sms> {
    return await this.service.createSms({
      ...args,
      data: {
        ...args.data,

        payment: args.data.payment
          ? {
              connect: args.data.payment,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Sms)
  async updateSms(@graphql.Args() args: UpdateSmsArgs): Promise<Sms | null> {
    try {
      return await this.service.updateSms({
        ...args,
        data: {
          ...args.data,

          payment: args.data.payment
            ? {
                connect: args.data.payment,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Sms)
  async deleteSms(@graphql.Args() args: DeleteSmsArgs): Promise<Sms | null> {
    try {
      return await this.service.deleteSms(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Payment, {
    nullable: true,
    name: "payment",
  })
  async getPayment(@graphql.Parent() parent: Sms): Promise<Payment | null> {
    const result = await this.service.getPayment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
