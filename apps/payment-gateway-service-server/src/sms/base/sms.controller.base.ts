/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SmsService } from "../sms.service";
import { SmsCreateInput } from "./SmsCreateInput";
import { Sms } from "./Sms";
import { SmsFindManyArgs } from "./SmsFindManyArgs";
import { SmsWhereUniqueInput } from "./SmsWhereUniqueInput";
import { SmsUpdateInput } from "./SmsUpdateInput";

export class SmsControllerBase {
  constructor(protected readonly service: SmsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Sms })
  async createSms(@common.Body() data: SmsCreateInput): Promise<Sms> {
    return await this.service.createSms({
      data: {
        ...data,

        payment: data.payment
          ? {
              connect: data.payment,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        message: true,

        payment: {
          select: {
            id: true,
          },
        },

        receivedAt: true,
        senderPhoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Sms] })
  @ApiNestedQuery(SmsFindManyArgs)
  async smsItems(@common.Req() request: Request): Promise<Sms[]> {
    const args = plainToClass(SmsFindManyArgs, request.query);
    return this.service.smsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        message: true,

        payment: {
          select: {
            id: true,
          },
        },

        receivedAt: true,
        senderPhoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Sms })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sms(@common.Param() params: SmsWhereUniqueInput): Promise<Sms | null> {
    const result = await this.service.sms({
      where: params,
      select: {
        createdAt: true,
        id: true,
        message: true,

        payment: {
          select: {
            id: true,
          },
        },

        receivedAt: true,
        senderPhoneNumber: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Sms })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSms(
    @common.Param() params: SmsWhereUniqueInput,
    @common.Body() data: SmsUpdateInput
  ): Promise<Sms | null> {
    try {
      return await this.service.updateSms({
        where: params,
        data: {
          ...data,

          payment: data.payment
            ? {
                connect: data.payment,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          message: true,

          payment: {
            select: {
              id: true,
            },
          },

          receivedAt: true,
          senderPhoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Sms })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSms(
    @common.Param() params: SmsWhereUniqueInput
  ): Promise<Sms | null> {
    try {
      return await this.service.deleteSms({
        where: params,
        select: {
          createdAt: true,
          id: true,
          message: true,

          payment: {
            select: {
              id: true,
            },
          },

          receivedAt: true,
          senderPhoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
