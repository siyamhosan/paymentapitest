/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Sms as PrismaSms,
  Payment as PrismaPayment,
} from "@prisma/client";

export class SmsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SmsCountArgs, "select">): Promise<number> {
    return this.prisma.sms.count(args);
  }

  async smsItems<T extends Prisma.SmsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SmsFindManyArgs>
  ): Promise<PrismaSms[]> {
    return this.prisma.sms.findMany<Prisma.SmsFindManyArgs>(args);
  }
  async sms<T extends Prisma.SmsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SmsFindUniqueArgs>
  ): Promise<PrismaSms | null> {
    return this.prisma.sms.findUnique(args);
  }
  async createSms<T extends Prisma.SmsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SmsCreateArgs>
  ): Promise<PrismaSms> {
    return this.prisma.sms.create<T>(args);
  }
  async updateSms<T extends Prisma.SmsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SmsUpdateArgs>
  ): Promise<PrismaSms> {
    return this.prisma.sms.update<T>(args);
  }
  async deleteSms<T extends Prisma.SmsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SmsDeleteArgs>
  ): Promise<PrismaSms> {
    return this.prisma.sms.delete(args);
  }

  async getPayment(parentId: string): Promise<PrismaPayment | null> {
    return this.prisma.sms
      .findUnique({
        where: { id: parentId },
      })
      .payment();
  }
}
